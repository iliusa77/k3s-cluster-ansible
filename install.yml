---
- name: Setup K3S server
  hosts: server
  become: true
  vars:
    user: vagrant
  tasks:
    - name: Install k3s server
      shell: "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} sh -" 

    - name: Store Master node-token
      slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: token

    - local_action: copy content={{ token['content'] | b64decode }} dest=token
      become: false

    # - name: Output token value
    #   debug: msg="{{ token['content'] | b64decode}}"

    - name: Update k3s-server unit file
      lineinfile:
        path: /etc/systemd/system/k3s.service
        search_string: "server"
        line: "server --node-external-ip {{ groups['server'] | join('[]') }}"

    - name: Restart service k3s-server
      systemd_service:
        state: restarted
        daemon_reload: true
        name: k3s.service

    - name: Change config permissions
      shell: sudo chmod a=r /etc/rancher/k3s/k3s.yaml

    - name: Creates kubeconfig directory
      file:
        path: "/home/{{ user }}/.kube"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: Prepare kubeconfig for Lens
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "/home/{{ user }}/.kube/config"
        remote_src: yes

    - name: Kubectl alias
      shell: echo 'alias k=\"kubectl\"' >> /home/{{ user }}/.bashrc
      tags: kubectl_alias

    - name: Fetch kubectx
      get_url:
        url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx
        dest: /usr/local/bin/kubectx
        mode: u=rwx,g=rx,o=rx
      tags: kubectx

    - name: Fetch kubens
      get_url:
        url: https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens
        dest: /usr/local/bin/kubens
        mode: u=rwx,g=rx,o=rx
      tags: kubens

    - name: kubectx alias
      shell: echo 'alias kx=\"kubectx\"' >> /home/{{ user }}/.bashrc
      tags: kubectx

    - name: kubens alias
      shell: echo 'alias ks=\"kubens\"' >> /home/{{ user }}/.bashrc
      tags: kubens

    - name: Permisstions for /etc/rancher/k3s/k3s.yaml.lock
      file:
        path: /etc/rancher/k3s/k3s.yaml.lock
        mode: u=rw,g=r,o=r
      tags: 
        - kubectx
        - kubens

    - name: Install ChartMuseum
      shell: curl https://raw.githubusercontent.com/helm/chartmuseum/main/scripts/get-chartmuseum | bash
      tags: chartmuseum

    - name: Create a unit file for ChartMuseum
      copy:
        src: files/chart_museum_unit_file
        dest: /etc/systemd/system/chartmuseum.service
      tags: chartmuseum

    - name: Start service ChartMuseum
      systemd_service:
        state: started
        daemon_reload: true
        name: chartmuseum
      tags: chartmuseum

    - name: Add demo chart in ChartMuseum
      become: false
      shell: |
        mkdir /home/{{ user }}/chartmuseum
        cd /home/{{ user }}/chartmuseum
        helm create aloha-backend-chart
        rm -rf aloha-backend-chart/templates/*
        cat << EOF > aloha-backend-chart/templates/configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: aloha-backend-config
        data:
          value: "some value"
        EOF
        echo 'subject: helm' >> aloha-backend-chart/values.yaml
        cd ..
        helm repo index chartmuseum --url http://{{ groups['server'] | join('[]') }}:8080
        cd /home/{{ user }}/chartmuseum
        curl --data-binary "@aloha-backend-chart-0.1.0.tgz" http://{{ groups['server'] | join('[]') }}:8080/api/charts
        cd /tmp
        sleep 60
        wget http://192.168.56.10:8080/charts/aloha-backend-chart-0.1.0.tgz
        tar -xvf aloha-backend-chart-0.1.0.tgz
        helm install aloha-backend aloha-backend-chart/
      tags: chartmuseum_demo_chart  
        

- name: Setup K3S agent
  hosts: agent
  become: true
  tasks:
    - name: Set token
      set_fact:
        k3s_server_token: "{{ lookup('ansible.builtin.file', 'token') }}"

    - name: Output token value
      debug: msg="{{ groups['server'] | join('[]') }}"

    - name: Install k3s agent
      shell: "curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} K3S_URL=https://{{ groups['server'] | join('[]') }}:6443 K3S_TOKEN={{ k3s_server_token }} sh -"

    - name: Restart service k3s-agent
      systemd_service:
        state: restarted
        daemon_reload: true
        name: k3s-agent.service
  
- name: Install K8S Controllers
  hosts: server
  become: true
  vars:
    user: vagrant
    install_controllers: true
  tasks:
    - name: Install ArgoCD controller
      shell: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      when: install_controllers == true
      tags: argocd

    - name: Install apt pre-requisites
      apt:
        name: python3-pip
        state: present
        update_cache: yes
      tags: argocd

    - name: Install kubernetes pre-requisites
      pip:
        name:
          - pyyaml
          - kubernetes
      tags: argocd

    - name: Deploy AgroCD IngressRoute
      kubernetes.core.k8s:
        kubeconfig: "/home/{{ user }}/.kube/config"
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: argocd-server
            namespace: argocd
          spec:
            entryPoints:
              - websecure
            routes:
              - kind: Rule
                match: Host(`argocd.example.com`)
                priority: 10
                services:
                  - name: argocd-server
                    port: 80
              - kind: Rule
                match: Host(`argocd.example.com`) && Header(`Content-Type`, `application/grpc`)
                priority: 11
                services:
                  - name: argocd-server
                    port: 80
                    scheme: h2c
            tls:
              certResolver: default
      tags: 
        - argocd
        - argocd_ingressroute

    - name: Copy ArgoCD ingress manifest
      copy:
        src: files/ingresses/{{ item }}
        dest: /home/{{ user }}/{{ item }}
      with_items:
        - argocd_traefik_ingress.yaml
      tags: 
        - argocd
        - argocd_ingress

    - name: Deploy ArgoCD ingress resources 
      become: false
      shell: |
        cd /home/{{ user }}/
        cat argocd_traefik_ingress.yaml | envsubst | kubectl apply -f -
      tags: 
        - argocd
        - argocd_ingress

    - name: Download Helm command line tool
      uri:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        return_content: true
      register: helm_installer
      tags:
        - helm

    - name: Install Helm
      command:
        cmd: bash
        stdin: "{{ helm_installer.content }}"
        creates: /usr/local/bin/helm
      environment:
        DESIRED_VERSION: "{{ helm_version | default('') }}"
      tags:
        - helm

    - name: Add ESO chart repo
      kubernetes.core.helm_repository:
        name: external-secrets
        repo_url: "https://charts.external-secrets.io"
      tags: 
        - helm
        - eso

    - name: Deploy ESO Helm chart
      kubernetes.core.helm:
        name: external-secrets
        chart_ref: external-secrets/external-secrets
        release_namespace: external-secrets
        create_namespace: true
        kubeconfig: "/home/{{ user }}/.kube/config"
        values:
          installCRDs: true
      tags: 
        - helm
        - eso

# Prometheus,Grafana,Loki stack for k8s cluster monitoring and logging
    - name: Prepare kubeconfig for Lens
      copy:
        src: files/controllers/prometheus
        dest: "/home/{{ user }}/"
      tags: monitoring

    - name: Deploy Prometheus/Grafana stack
      become: false
      shell: |
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update grafana
        helm upgrade --install loki --namespace=monitoring-system grafana/loki-stack --create-namespace

        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update prometheus-community
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring-system \
          --set grafana.adminPassword='6nppQ?yY9PjEgtyQU:VxB-k4PgCPrbkv' \
          -f /home/{{ user }}/prometheus/prometheus-values.yaml \
      tags: monitoring

# Vault
    - name: Install jq for Vault unseal
      apt:
        name: jq
        state: present
      tags: vault

    - name: Deploy Hashicorp Vault
      become: false
      shell: |
        helm repo add hashicorp https://helm.releases.hashicorp.com
        helm repo update hashicorp
        helm upgrade --install vault hashicorp/vault \
          --namespace=vault \
          --create-namespace \
          --set storageClassName=local-path \
          --set='server.ha.enabled=true' \
          --set='server.ha.raft.enabled=true'
        
        # Unseal
        kubectl exec vault-0 -n vault -- vault operator init \
          -key-shares=1 \
          -key-threshold=1 \
          -format=json > cluster-keys.json
        VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" cluster-keys.json)
        kubectl exec vault-0 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY

        kubectl exec vault-1 -n vault -- vault operator init \
          -key-shares=1 \
          -key-threshold=1 \
          -format=json > cluster-keys.json
        VAULT_UNSEAL_KEY2=$(jq -r ".unseal_keys_b64[]" cluster-keys.json)
        kubectl exec vault-1 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY2

        kubectl exec vault-2 -n vault -- vault operator init \
          -key-shares=1 \
          -key-threshold=1 \
          -format=json > cluster-keys.json
        VAULT_UNSEAL_KEY3=$(jq -r ".unseal_keys_b64[]" cluster-keys.json)
        kubectl exec vault-2 -n vault -- vault operator unseal $VAULT_UNSEAL_KEY3

        # kubectl exec -ti vault-1 -n vault -- vault operator raft join http://vault-0.vault-internal:8200
        # kubectl exec -ti vault-2 -n vault -- vault operator raft join http://vault-0.vault-internal:8200
      register: deploy_hashicorp_vault
      until: deploy_hashicorp_vault is not failed
      retries: 5
      delay: 3
      tags: vault

# Traefik Dashboard
    - name: Copy Traefik dashboard manifests
      copy:
        src: files/ingresses/{{ item }}
        dest: /home/{{ user }}/{{ item }}
      with_items:
        - traefik-dashboard-service.yaml
        - traefik-dashboard-ingress.yaml
      tags: traefik_dashboard

    - name: Deploy Traefik dashboard resources #Deshboard will be available by url http://traefik.local/dashboard/#/
      become: false
      shell: |
        cd /home/{{ user }}/
        cat traefik-dashboard-service.yaml | envsubst | kubectl apply -f -
        cat traefik-dashboard-ingress.yaml | envsubst | kubectl apply -f -
      tags: traefik_dashboard